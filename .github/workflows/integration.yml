on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

concurrency:
  group: ${{ github.ref_name }}


env:
  AWS_REGION: "us-east-2"
  FRONTEND_REPOSITORY_NAME: "frontend"
  BACKEND_REPOSITORY_NAME: "backend"
  BACKEND_PROXY_REPOSITORY_NAME: "proxy"
  ECR_REPOSITORY_URL: "454624638483.dkr.ecr.us-east-2.amazonaws.com"
  ENVIRONMENT: ${{ github.ref_name }}
  PROXY_PORT: 80
  APP_PORT: 8080
  APP_HOST: localhost
  FILTER_TAG: latest
  PROXY_DIRECTORY: 'proxy'
  NODEJS_DIRECTORY: 'nodejs'

jobs:
  changes:
    name: "Routing"
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    steps:

      - name: Download repository...
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Check changed directories...
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v29.0.2
        with:
          dir_names: "true"

      - name: Show output
        run: echo ${{ steps.changed-files-dir-names.outputs.all_changed_and_modified_files }}

      - name: List all changed directories...
        run: |
          for directory in ${{ steps.changed-files-dir-names.outputs.all_changed_and_modified_files }}; do
            echo "$directory was changed"
          done

      - name: Get short commit id
        id: sha
        run: echo "::set-output name=short::$(git rev-parse --short HEAD)"

    outputs:
      changed_directories: ${{ steps.changed-files-dir-names.outputs.all_changed_and_modified_files }}
      short_sha: ${{ steps.sha.outputs.short }}
      
  infrastructure:
    name: Infrastructure
    needs: changes
    runs-on: ubuntu-latest
    env:
      INFRASTRUCTURE_DIRECTORY: 'tier0'
    if: |
      always() &&
      needs.changes.result == 'success' &&
      contains(needs.changes.outputs.changed_directories, "$(echo $INFRASTRUCTURE_DIRECTORY)")
    steps:
      - name: Download repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set app TF vars
        uses: ./.github/actions/set-infrastructure-tags/
        with: 
          short-sha: ${{ needs.changes.outputs.short_sha }}
          repository-name: ${{ env.BACKEND_PROXY_REPOSITORY_NAME }}
          filter-tag: ${{ env.FILTER_TAG }}
          region: ${{ env.AWS_REGION }}
          branch: ${{ github.ref_name }}
          tf-var-name: backend_app_container_image_tag

      - name: Set proxy TF vars
        uses: ./.github/actions/set-infrastructure-tags/
        with: 
          short-sha: ${{ needs.changes.outputs.short_sha }}
          repository-name: ${{ env.BACKEND_REPOSITORY_NAME }}
          filter-tag: ${{ env.FILTER_TAG }}
          region: ${{ env.AWS_REGION }}
          branch: ${{ github.ref_name }}
          tf-var-name: backend_proxy_container_image_tag

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        if: env.buildBackendAppImage == 'true' || env.buildBackendProxyImage == 'true'

      - name: Substitute proxy env variables
        run: envsubst <  default.conf.tpl > default.conf
        working-directory: './tier2/proxy/'
        if: env.buildBackendProxyImage == 'true'

      - name: Substitute app env variables
        run: envsubst <  server.js.tpl > server.js
        working-directory: './tier2/nodejs/'
        if: env.buildBackendAppImage == 'true'
      
      - name: Building app image...
        uses: docker/build-push-action@v2
        with:
          context: "./tier2/nodejs/"
          file: "./tier2/nodejs/Dockerfile"
          push: true
          tags: | 
            ${{ env.BACKEND_REPOSITORY_URL }}:latest
            ${{ env.BACKEND_REPOSITORY_URL }}:${{ github.ref_name }}
            ${{ env.BACKEND_REPOSITORY_URL }}:${{ needs.changes.outputs.short_sha }}
        env:
          BACKEND_REPOSITORY_URL: ${{ format('{0}/{1}', env.ECR_REPOSITORY_URL, env.BACKEND_REPOSITORY_NAME) }}
        if: env.buildBackendAppImage == 'true'

      - name: Build proxy image...
        uses: docker/build-push-action@v2
        with:
          context: "./tier2/proxy"
          file: "./tier2/proxy/Dockerfile"
          push: true
          tags: |
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:latest
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:${{ github.ref_name }}
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:${{ needs.changes.outputs.short_sha }}
        env:
          BACKEND_PROXY_REPOSITORY_URL: ${{ format('{0}/{1}', env.ECR_REPOSITORY_URL, env.BACKEND_PROXY_REPOSITORY_NAME) }}
        if: env.buildBackendProxyImage == 'true'

      - name: Setup terraform 
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init
        working-directory: "./tier0/environments/dev/"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: "./tier0/environments/dev/"

      - name: Terraform plan
        run: terraform plan -no-color
        working-directory: "./tier0/environments/dev/"

      # - name: Terraform apply
      #   working-directory: "./tier0/environments/dev"
      #   run: terraform apply -auto-approve

  backend:
    name: Backend
    needs: [changes, infrastructure]
    runs-on: ubuntu-latest
    env:
      BACKEND_DIRECTORY: 'tier2'
    if: |
      always() &&
      needs.changes.result == 'success' &&
      (needs.infrastructure.result == 'success' || needs.infrastructure.result == 'skipped') &&
      contains(needs.changes.outputs.changed_directories, env.BACKEND_DIRECTORY)
    steps:

      - name: Download repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Substitute proxy env variables
        run: envsubst <  default.conf.tpl > default.conf
        working-directory: './tier2/proxy/'
        if: contains(needs.changes.outputs.changed_directories, 'proxy')

      - name: Substitute app env variables
        run: envsubst <  server.js.tpl > server.js
        working-directory: './tier2/nodejs/'
        if: contains(needs.changes.outputs.changed_directories, 'nodejs')

      - name: Build image for proxy...
        uses: docker/build-push-action@v2
        with:
          context: "./tier2/proxy"
          file: "./tier2/proxy/Dockerfile"
          push: true
          tags: |
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:latest
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:${{ github.ref_name }}
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:${{ needs.changes.outputs.short_sha }}
        env:
          BACKEND_PROXY_REPOSITORY_URL: ${{ format('{0}/{1}', env.ECR_REPOSITORY_URL, env.BACKEND_PROXY_REPOSITORY_NAME) }}
        if: contains(needs.changes.outputs.changed_directories, 'proxy')

      - name: Build image for backend...
        uses: docker/build-push-action@v2
        with:
          context: "./tier2/nodejs"
          file: "./tier2/nodejs/Dockerfile"
          push: true
          tags: |
            ${{ env.BACKEND_REPOSITORY_URL }}:latest
            ${{ env.BACKEND_REPOSITORY_URL }}:${{ github.ref_name }}
            ${{ env.BACKEND_REPOSITORY_URL }}:${{ needs.changes.outputs.short_sha }}
        env:
          BACKEND_REPOSITORY_URL: ${{ format('{0}/{1}', env.ECR_REPOSITORY_URL, env.BACKEND_REPOSITORY_NAME) }}
        if: contains(needs.changes.outputs.changed_directories, 'nodejs')

      - name: Set proxy tag
        uses: ./.github/actions/set-backend-tags/
        with: 
          short-sha: ${{ needs.changes.outputs.short_sha }}
          repository-name: ${BACKEND_PROXY_REPOSITORY_NAME}
          filter-tag: ${FILTER_TAG}
          region: ${AWS_REGION}
          branch: ${{ github.ref_name }}
          changed: ${{ contains(needs.changes.outputs.changed_directories, 'proxy') }}

      - name: Set app tag
        uses: ./.github/actions/set-backend-tags/
        with: 
          short-sha: ${{ needs.changes.outputs.short_sha }}
          repository-name: ${BACKEND_REPOSITORY_NAME}
          filter-tag: ${FILTER_TAG}
          region: ${AWS_REGION}
          branch: ${{ github.ref_name }}
          changed: ${{ contains(needs.changes.outputs.changed_directories, 'nodejs') }}

      - name: Setup terraform 
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init
        working-directory: "./tier0/environments/dev/"

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        working-directory: "./tier0/environments/dev/"

      - name: Terraform plan
        run: terraform plan -no-color
        env:
            TF_VAR_backend_app_container_port: ${{ env.APP_PORT }}
            TF_VAR_backend_proxy_container_port: ${{ env.PROXY_PORT }}       
        working-directory: "./tier0/environments/dev/"

      - name: Terraform apply
        run: terraform apply -auto-approve -target module.ecs.aws_ecs_service.api -target module.ecs.aws_ecs_task_definition.api
        env:
            TF_VAR_backend_app_container_port: ${{ env.APP_PORT }}
            TF_VAR_backend_proxy_container_port: ${{ env.PROXY_PORT }}       
        working-directory: "./tier0/environments/dev/"

  frontend:
    name: Frontend
    needs: [changes, infrastructure, backend]
    if: |
      always() &&
      needs.changes.result == 'success' &&
      (needs.infrastructure.result == 'success' || needs.infrastructure.result == 'skipped') &&
      (needs.backend.result == 'success' || needs.backend.result == 'skipped') &&
      contains(needs.changes.outputs.changed_directories, env.FRONTEND_DIRECTORY)
    runs-on: ubuntu-latest
    env:
      FRONTEND_DIRECTORY: "tier1"
    steps:

      - name: Download repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.FRONTEND_DIRECTORY }}
      
      - name: Test
        run: npm test
        env:
          CI: true
        working-directory: ${{ env.FRONTEND_DIRECTORY }}
      
      - name: Generate build
        run: npm run build
        working-directory: ${{ env.FRONTEND_DIRECTORY }}

      - name: "Check if index.html exists..."
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./${{env.FRONTEND_DIRECTORY}}/build/index.html"

      - name: "Fail if files dont exit"
        if: steps.check_files.outputs.files_exists != 'true'
        run: |
          ls -alh ./build
          echo "./$FRONTEND_DIRECTORY/build/index.html is missing!"
          exit 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync "./build/" s3://artifacts1910 --dryrun --exclude docker --delete
        working-directory: ${{ env.FRONTEND_DIRECTORY }}

      - name: Setup terraform 
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: "./tier0/environments/dev/"
    
      - name: Call terraform output
        run: |
          echo "CLOUDFRONT_ID=$(terraform output cloudfront_id | tr -d '\"')" >> "$GITHUB_ENV"
        working-directory: "./tier0/environments/dev/"

      - name: Test
        run: echo ${{ env.CLOUDFRONT_ID }}

      - name: Invalidate Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ env.CLOUDFRONT_ID }}
          PATHS: "/*"
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEBUG: "1"