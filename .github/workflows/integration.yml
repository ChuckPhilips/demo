on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Run changed-files with dir_names
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v29.0.2
        with:
          dir_names: "true"

      - name: List all changed directories
        run: |
          for directory in ${{ steps.changed-files-dir-names.outputs.all_changed_and_modified_files }}; do
            echo "$directory was changed"
          done
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Update infrastructure
        if: contains(steps.changed-files-dir-names.outputs.all_changed_and_modified_files, 'infrastructure')
        env:
          AWS_REGION: "us-east-2"
          AWS_ECR_REPOSITORY: "ecr-simplehttp"
          FILTER_TAG: "latest"

        run: |
          echo "Updating infrastructure !!!"
          #IMAGE_EXISTS=$(aws ecr list-images --repository-name ecr-simplehttp --filter tagStatus=TAGGED --region us-east-2 | jq '.imageIds[].imageTag' | grep -v null | tr -d '"' | grep -c latest)
          #IMAGE_EXISTS=$(aws ecr describe-images --repository-name ecr-simplehttp --image-ids imageTag=latest --region us-east-2 | jq '.imageDetails[].imageTags[]' | tr -d '"' | fgrep -v "latest" | head -n1)

          IMAGES_EXIST=$(aws ecr list-images --repository-name "${AWS_ECR_REPOSITORY}" --region "${AWS_REGION}" | jq '.imageIds | length')

          if [[ ${IMAGES_EXIST} -gt 0 ]]
          then
            echo "buildImage=false" >> $GITHUB_ENV

            images=$(aws ecr describe-images --repository-name "${AWS_ECR_REPOSITORY}" --image-ids imageTag="${FILTER_TAG}" --region "${AWS_REGION}")
            tag=$(echo "$images" | jq '.imageDetails[].imageTags[]' | tr -d '"' | grep -v "$FILTER_TAG" | head -n1)

            if [[ $(echo $tag | wc -l) -gt 0 ]]
            then
              echo "Latest tag is: $tag"
            else
              echo "Latest tag does not exits, exiting..."
              exit 1
            fi

            echo "LATEST_TAG=${tag}" >> $GITHUB_ENV
            else
              echo "There are no images!!"
              echo "buildImage=true" >> $GITHUB_ENV
          fi

      - name: Building initial image...
        if: contains(steps.changed-files-dir-names.outputs.all_changed_and_modified_files, 'infrastructure') && env.buildImage == true
        uses: docker/build-push-action@v2
        with:
          context: "./backend/"
          file: "./backend/Dockerfile"
          push: false

      - name: Update frontend
        if: contains(steps.changed-files-dir-names.outputs.all_changed_and_modified_files, 'frontend')
        run: |
          echo "Updating frontend"
          
        
      - name: Update backend
        if: contains(steps.changed-files-dir-names.outputs.all_changed_and_modified_files, 'backend')
        run: echo "Updating backend"
      
      - name: Try build
        if: contains(steps.changed-files-dir-names.outputs.all_changed_and_modified_files, 'backend')
        uses: docker/build-push-action@v2
        with:
          context: "./backend/"
          file: "./backend/Dockerfile"
          push: false
