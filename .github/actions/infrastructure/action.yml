name: "Infrastructure"
description: "Sets infra"
inputs:
  aws-access-key-id:
    required: true
  aws-secret-access-key:
    required: true
  short-sha:
    required: true
runs:
  using: "composite"
  steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set app TF vars
        uses: ./.github/actions/set-infrastructure-tags/
        with: 
          short-sha: ${{ inputs.short_sha }}
          repository-name: ${{ env.BACKEND_REPOSITORY_NAME }}
          filter-tag: ${{ env.FILTER_TAG }}
          region: ${{ env.AWS_REGION }}
          branch: ${{ github.ref_name }}
          tf-var-name: backend_app_container_image_tag
          build-image: buildBackendAppImage

      - name: Set proxy TF vars
        uses: ./.github/actions/set-infrastructure-tags/
        with: 
          short-sha: ${{ inputs.short_sha }}
          repository-name: ${{ env.BACKEND_PROXY_REPOSITORY_NAME }}
          filter-tag: ${{ env.FILTER_TAG }}
          region: ${{ env.AWS_REGION }}
          branch: ${{ github.ref_name }}
          tf-var-name: backend_proxy_container_image_tag
          build-image: buildBackendProxyImage

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        if: env.buildBackendAppImage == 'true' || env.buildBackendProxyImage == 'true'

      - name: Substitute proxy env variables
        run: envsubst <  default.conf.tpl > default.conf
        working-directory: "${{ env.BACKEND_DIRECTORY }}/${{ env.PROXY_DIRECTORY }}/"
        if: env.buildBackendProxyImage == 'true'
        shell: bash

      - name: Substitute app env variables
        run: envsubst <  server.js.tpl > server.js
        working-directory: "${{ env.BACKEND_DIRECTORY }}/${{ env.NODEJS_DIRECTORY }}/"
        if: env.buildBackendAppImage == 'true'
        shell: bash
      
      - name: Building app image...
        uses: docker/build-push-action@v2
        with:
          context: "${{ env.BACKEND_DIRECTORY }}/${{ env.NODEJS_DIRECTORY }}/"
          file: "${{ env.BACKEND_DIRECTORY }}/${{ env.NODEJS_DIRECTORY }}/Dockerfile"
          push: true
          tags: | 
            ${{ env.BACKEND_REPOSITORY_URL }}:latest
            ${{ env.BACKEND_REPOSITORY_URL }}:${{ github.ref_name }}
            ${{ env.BACKEND_REPOSITORY_URL }}:${{ inputs.short_sha }}
        env:
          BACKEND_REPOSITORY_URL: ${{ format('{0}/{1}', env.ECR_REPOSITORY_URL, env.BACKEND_REPOSITORY_NAME) }}
        if: env.buildBackendAppImage == 'true'

      - name: Build proxy image...
        uses: docker/build-push-action@v2
        with:
          context: "${{ env.BACKEND_DIRECTORY }}/${{ env.PROXY_DIRECTORY }}/"
          file: "${{ env.BACKEND_DIRECTORY }}/${{ env.PROXY_DIRECTORY }}/Dockerfile"
          push: true
          tags: |
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:latest
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:${{ github.ref_name }}
            ${{ env.BACKEND_PROXY_REPOSITORY_URL }}:${{ inputs.short_sha }}
        env:
          BACKEND_PROXY_REPOSITORY_URL: ${{ format('{0}/{1}', env.ECR_REPOSITORY_URL, env.BACKEND_PROXY_REPOSITORY_NAME) }}
        if: env.buildBackendProxyImage == 'true'

      - name: Setup terraform 
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init
        working-directory: "${{ env.INFRASTRUCTURE_DIRECTORY }}/environments/dev/"
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: "${{ env.INFRASTRUCTURE_DIRECTORY }}/environments/dev/"
        shell: bash

      - name: Terraform plan
        run: terraform plan -no-color
        working-directory: "${{ env.INFRASTRUCTURE_DIRECTORY }}/environments/dev/"
        shell: bash

      # - name: Terraform apply
      #   working-directory: "./tier0/environments/dev"
      #   run: terraform apply -auto-approve
      #   shell: bash