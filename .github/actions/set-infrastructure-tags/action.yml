name: "Set tags"
description: "Set tags for Terraform variables"
inputs:
  short-sha:
    required: true
    description: "Shorter commit id"
  repository-name:
    required: true
    description: "Repository for the app"
    default: Demo
  filter-tag:
    required: true
    description: "Tag to filter images by"
    default: latest
  region:
    required: true
    description: "Repository region"
  branch:
    required: true
    description: "Images filter"
  tf-var-name:
    required: true
    description: "TF var name for image"
  build-image:
    required: true
    description: "Variable name to or not to build an image"
runs:
  using: "composite"
  steps:
    - name: Set image tag
      shell: bash
      run: |
          echo "Getting tags from repository: ${{ inputs.repository-name }}"
          
          TAGS_COUNT=$(aws ecr list-images \
          --repository-name "${{ inputs.repository-name }}" \
          --region "${{ inputs.region }}" \
          | jq '.imageIds | length')
          
          echo "Number of tags is: ${TAGS_COUNT}"

          if [[ ${TAGS_COUNT} -gt 0 ]]
          then
            echo "Some images already exist, filter them by tag: ${{ inputs.filter-tag }}."
            
            IMAGE=$(aws ecr describe-images \
            --repository-name "${{ inputs.repository-name }}" \
            --image-ids imageTag="${{ inputs.filter-tag }}" \
            --region "${{ inputs.region }}")
            
            echo "Image is: ${IMAGE}"

            echo "Getting commit tag."

            TAG=$(echo "${IMAGE}" \
            | jq '.imageDetails[].imageTags' \
            | jq \
            --arg BRANCH "${{ inputs.branch }}" \
            --arg FILTER "${{ inputs.filter-tag }}" \
            'del(.[] | select(. == $BRANCH or . == $FILTER))[]' \
            | tr -d '"' \
            | tail -n1)

            if [[ $(echo "${TAG}" | wc -l) -gt 0 ]]
            then
              echo "Commit tag is ${TAG}."
              echo "${{ inputs.build-image }}=false" | tee -a "$GITHUB_ENV"
              echo "TF_VAR_${{ inputs.tf-var-name }}=${TAG}" | tee -a "$GITHUB_ENV"
            else
              echo "Latest tag does not exits, something wrong, exiting..."
              exit 1
            fi
          else
            echo "There are no images in repository: ${{ inputs.repository-name }}, will build one."
            echo "${{ inputs.build-image }}=true" | tee -a "$GITHUB_ENV"
            echo "TF_VAR_${{inputs.tf-var-name}}=${{ inputs.short-sha }}" | tee -a "$GITHUB_ENV"
          fi