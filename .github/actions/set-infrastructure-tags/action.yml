name: "Set tags"
description: "Set tags for Terraform variables"
inputs:
  short-sha:
    required: true
    description: "Shorter commit id"
  repository-name:
    required: true
    description: "Repository for the app"
    default: Demo
  filter-tag:
    required: true
    description: "Tag to filter images by"
    default: latest
  region:
    required: true
    description: "Repository region"
  branch:
    required: true
    description: "Images filter"
  tf-var-name:
    required: true
    description: "TF var name for image"
runs:
  using: "composite"
  steps:
    - name: Set image tag
      shell: bash
      run: |
          echo "Getting backend proxy images ids..."
          
          BACKEND_PROXY_IMAGES_IDS=$(aws ecr list-images \
          --repository-name "${{ inputs.repository-name }}" \
          --region "${{ inputs.region }}" \
          | jq '.imageIds | length')
          
          echo "Backend proxy images ids: ${BACKEND_PROXY_IMAGES_IDS}"

          if [[ ${BACKEND_PROXY_IMAGES_IDS} -gt 0 ]]
          then
            echo "Some images already exist, getting them by tag: ${{ inputs.filter-tag }}"
            
            BACKEND_PROXY_IMAGES=$(aws ecr describe-images \
            --repository-name "${{ inputs.repository-name }}" \
            --image-ids imageTag="${{ inputs.filter-tag }}" \
            --region "${{ inputs.region }}")
            
            echo "Images are: ${BACKEND_PROXY_IMAGES}"
            
            echo "Getting tag from latest image..."

            TAG=$(echo "${BACKEND_PROXY_IMAGES}" \
            | jq '.imageDetails[].imageTags' \
            | jq \
            --arg BRANCH "${{ inputs.branch }}" \
            --arg FILTER "${{ inputs.filter-tag }}" 'del(.[] | select(. == $BRANCH or . == $FILTER))[]' \
            | tr -d '"' \
            | tail -n1)

            if [[ $(echo "${TAG}" | wc -l) -gt 0 ]]
            then
              echo "Image already exists, tag is ${TAG}"
              echo "buildBackendProxyImage=false" >> "$GITHUB_ENV"
              echo "Set tag ${TAG} in Terraform environment variables..."
              echo "TF_VAR_${{inputs.tf-var-name}}=${TAG}" >> "$GITHUB_ENV"
            else
              echo "Latest tag does not exits, something wrong, exiting..."
              exit 1
            fi
          else
            echo "Proxy image does not exists, will build one..."
            echo "buildBackendProxyImage=true" >> "$GITHUB_ENV"
            echo "Set tag ${{ inputs.short-sha }} in Terraform environment variables..."
            echo "TF_VAR_${{inputs.tf-var-name}}=${{ inputs.short-sha }}" >> "$GITHUB_ENV"
          fi